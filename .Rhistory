main = "Barplot des adduits N-acetyl",
ylab = "Moyenne")
arrows(bp, moyennes, bp, moyennes + ecart_types, angle = 90, code = 3, length = 0.1, col = "black")
ecart_types = tapply(data$Nacetyl_corr2, data$smoking_status, sd)
barplot(donnees$Moyenne, names.arg = donnees$Groupe, col = "skyblue",
main = "Barplot des adduits N-acetyl",
ylab = "Moyenne")
arrows(bp, donnees$Moyenne, bp, donnees$Moyenne + ecart_types, angle = 90, code = 3, length = 0.1, col = "black")
ecart_types = tapply(data$Nacetyl_corr2, data$smoking_status, sd)
barplot(donnees$Moyenne, names.arg = donnees$Groupe, col = "skyblue",
main = "Barplot des adduits N-acetyl",
ylab = "Moyenne")
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
groupes = c("Former", "Current", "Never")
donnees = data.frame(Groupe = groupes, Moyenne = moyennes)
(moyennes_statut = tapply(data$Nacetyl_corr2, data$smoking_status, mean))
ecart_types = tapply(data$Nacetyl_corr2, data$smoking_status, sd)
barplot(donnees$Moyenne, names.arg = donnees$Groupe, col = "skyblue",
main = "Barplot des adduits N-acetyl",
ylab = "Moyenne")
arrows(bp, moyennes_statut, bp, moyennes_statut + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
moyennes_statut
ecart_types <- tapply(data$Nacetyl_corr2, data$smoking_status, sd)
barplot(donnees$Moyenne, names.arg = donnees$Groupe, col = "skyblue",
main = "Barplot des adduits N-acetyl",
ylab = "Moyenne")
arrows(bp, moyennes_statut, bp, moyennes_statut + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, sd)
#==========================================================================================================
#                                           Stats descriptive
#==========================================================================================================
getwd()
setwd("C:/Users/auror/OneDrive - Université Nice Sophia Antipolis/Documents/GitHub/Projet-R-GB4")
data = read.csv("LC-Adductomics.csv")
data
View(data)
# Partie 1
dim(data)
summary(data)
# Détail des moyennes et écart types des Albumines
summary(data$Albumin.adduct.of.CysGly)
summary(data$Albumin.adduct.of.Nacetylcysteine)
summary(data$Albumin.adduct.of.sulfonic.acid)
summary(data$Albumin.unadducted)
table(data$gender)
# 120 hommes et 77 femmes, test stat pour voir si différence significative
table(data$centre)
# 110 personnes sur Turin et 87 à Varese
table(data$smoking_status)
# 67 fumeur actuel, 64 anciens fumeurs et 66 never
table(data$case)
# 101 Sains et 96 Cancéreux
table(data$case, data$gender)
table(data$case, data$smoking_status)
par(mfrow = c(1, 1))
hist(data$age.recr)
qqnorm(data$age.recr)
shapiro.test(data$age.recr)
# répartition normale pas très claire
par(mfrow = c(1,1 ))
# Crée un vecteur pour les moyennes et comparaison en fonction des statut tabagique
(moyennes_par_etat = tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, mean))
# Ecart type
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, sd)
# barplot
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Nacetylcystéine", ylim = c(0,5) )
# Barre d'erreur sd
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
(moyennes_par_etat = tapply(data$Albumin.adduct.of.CysGly, data$smoking_status, mean))
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.CysGly, data$smoking_status, sd)
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "CysGly", ylim = c(0,500))
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.sulfonic.acid, data$smoking_status, sd)
(moyennes_par_etat = tapply(data$Albumin.adduct.of.sulfonic.acid, data$smoking_status, mean))
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Sulfonic", ylim = c(0,100) )
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
ecart_types_par_etat <- tapply(data$Albumin.unadducted, data$smoking_status, sd)
(moyennes_par_etat = tapply(data$Albumin.unadducted, data$smoking_status, mean))
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Non lié", ylim = c(0,700))
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.Nacetylcysteine, data$case, sd)
moyennes_par_etat = tapply(data$Albumin.adduct.of.Nacetylcysteine, data$case, mean)
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Nacetylcystéine", ylim = c(0,4) )
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.CysGly, data$case, sd)
moyennes_par_etat = tapply(data$Albumin.adduct.of.CysGly, data$case, mean)
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "CysGly", ylim = c(0,450))
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.sulfonic.acid, data$case, sd)
moyennes_par_etat = tapply(data$Albumin.adduct.of.sulfonic.acid, data$case, mean)
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Sulfonic", ylim = c(0,50))
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
ecart_types_par_etat <- tapply(data$Albumin.unadducted, data$case, sd)
moyennes_par_etat = tapply(data$Albumin.unadducted, data$case, mean)
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Non lié", ylim = c(0,600) )
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
#Histogramme
hist(log(data$Albumin.adduct.of.Nacetylcysteine))
wilcox.test(data$Albumin.adduct.of.Nacetylcysteine[data$case=="1"],data$Albumin.adduct.of.Nacetylcysteine[data$case=="0"])
hist(data$Albumin.adduct.of.CysGly)
wilcox.test(data$Albumin.adduct.of.CysGly[data$case=="1"],data$Albumin.adduct.of.CysGly[data$case=="0"])
hist(data$Albumin.adduct.of.sulfonic.acid)
wilcox.test(data$Albumin.adduct.of.sulfonic.acid[data$case=="1"],data$Albumin.adduct.of.sulfonic.acid[data$case=="0"])
hist(data$Albumin.unadducted)
wilcox.test(data$Albumin.unadducted[data$case=="1"],data$Albumin.unadducted[data$case=="0"])
mymodel = glm(data$case ~data$Albumin.adduct.of.Nacetylcysteine)
summary(mymodel)
mymodel2 = glm(data$case ~ data$Albumin.adduct.of.CysGly)
summary(mymodel2)
mymodel3 = glm(data$case ~ data$Albumin.adduct.of.sulfonic.acid)
summary(mymodel3)
mymodel4 = glm(data$case ~ data$smoking_status)
summary(mymodel4)
# Visualisation de la corrélation entre les 4 variables numériques
test = data.frame(data$Albumin.adduct.of.Nacetylcysteine, data$Albumin.adduct.of.CysGly, data$Albumin.unadducted, data$Albumin.adduct.of.sulfonic.acid)
pairs(test)
library(ggcorrplot)
matrice_corr = cor(test)
ggcorrplot(matrice_corr)
install.packages("GGally")
library(GGally)
ggpairs(data.frame(data$Albumin.adduct.of.Nacetylcysteine, data$Albumin.adduct.of.CysGly, data$Albumin.unadducted, data$Albumin.adduct.of.sulfonic.acid))
# Calcul des proportions avec prop.table
(proportion <- prop.table(table(data$smoking_status)))
Légende = names(proportion)
library(ggplot2)
# Création du graphique circulaire
ggplot(NULL, aes(x = "", y = proportion, fill = Légende)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
labs(title = "Diagramme circulaire représentant les\n proportions des états tabagiques") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(plot.margin = unit(c(1, 0.5, 1, 1), "cm")) +
geom_text(aes(label = paste0(round(proportion * 100), "%")), position = position_stack(vjust = 0.5), size = 5)
(proportion2 <- prop.table(table(data$smoking_status[data$case == "1"])))
Légende = names(proportion2)
library(ggplot2)
# Création du graphique circulaire
ggplot(NULL, aes(x = "", y = proportion2, fill = Légende)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
labs(title = "Diagramme circulaire représentant les\n proportions des états tabagiques") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(plot.margin = unit(c(1, 0.5, 1, 1), "cm")) +
geom_text(aes(label = paste0(round(proportion2 * 100), "%")), position = position_stack(vjust = 0.5), size = 5)
#============================ Valeurs aberrantes ==============================================
# Mise en forme des données
albumine = c(data$Albumin.adduct.of.Nacetylcysteine , data$Albumin.adduct.of.CysGly ,
data$Albumin.unadducted , data$Albumin.adduct.of.sulfonic.acid)
type_albumine = rep(c("Albumin.adduct.of.Nacetylcysteine", "Albumin.adduct.of.CysGly",
"Albumin.unadducted", "Albumin.adduct.of.sulfonic.acid"), each = 197)
data3 = data.frame(albumine, type_albumine)
View(data3)
library(ggplot2)
# boxplot général pour voir que c'est la d Les points en dehors des traits sont aberrants
ggplot(data3, aes(x=type_albumine,y=albumine, fill=type_albumine)) +
geom_boxplot()+
xlab(label = "Différents types d'albumines") +
ylab(label = "Concentration") +
theme(axis.text.x = element_text(angle=30, hjust=1, vjust=1))+
theme(legend.position="none")+
ggtitle("Boxplot des différentes albumines")
# Zoom pour mieux voir
ggplot(data3, aes(x=type_albumine,y=albumine, fill=type_albumine)) +
geom_boxplot()+
xlab(label = "Différents types d'albumines") +
ylab(label = "Concentration") +
theme(axis.text.x = element_text(angle=30, hjust=1, vjust=1))+
theme(legend.position="none")+
ggtitle("Boxplot des différentes albumines")+
ylim(c(0,10))
# Exclusion valeurs aberrantes
# https://delladata.fr/comment-detecter-les-outliers-avec-r/
#============================ CysGly ===============================
# Filtrer les données
(albu_CysGly <- data3[data3$type_albumine == "Albumin.adduct.of.CysGly",])
boxplot(albu_CysGly$albumine)
albu_CysGly2 = albu_CysGly
# Calculer les valeurs aberrantes
# Prend les valeurs supérieures ou inférieurs aux quartiles +-1.5 fois l'écart interquartile
(outliers <- boxplot.stats(data$Albumin.adduct.of.CysGly)$out)
# Afficher les indes des valeurs aberrantes
(index_outliers = which(data$Albumin.adduct.of.CysGly %in% c(outliers)))
# Suppression des valeurs aberrantes
albu_CysGly$albumine[index_outliers] = NaN
boxplot(albu_CysGly$albumine)
data$smoking_status = as.factor(data$smoking_status)
albu = c("Albumin.adduct.of.CysGly", "Albumin.adduct.of.Nacetylcysteine", "Albumin.unadducted", "Albumin.adduct.of.sulfonic.acid")
# Dégage les valeurs aberrantes par état tabagique
for (i in levels(data$smoking_status)){
outliers = boxplot.stats(data$Albumin.adduct.of.CysGly[data$smoking_status == i])$out
index_outliers = which(data$Albumin.adduct.of.CysGly %in% c(outliers))
# Affiche les valeurs détéctées
print(i)
print(outliers)
# Suppression des valeurs aberrantes
albu_CysGly2$albumine[index_outliers] = NaN
}
boxplot(albu_CysGly2$albumine)
#============================ Nacetyl ===============================
# Filtrer les données
(albu_Nacetyl <- data3[data3$type_albumine == "Albumin.adduct.of.Nacetylcysteine",])
albu_Nacetyl2 = albu_Nacetyl
# Calculer les valeurs aberrantes
# Prend les valeurs supérieures ou inférieurs aux quartiles +-1.5 fois l'écart interquartile
(outliers <- boxplot.stats(data$Albumin.adduct.of.Nacetylcysteine)$out)
# Afficher les indes des valeurs aberrantes
(index_outliers = which(data$Albumin.adduct.of.Nacetylcysteine %in% c(outliers)))
# Suppression des valeurs aberrantes
albu_Nacetyl$albumine[index_outliers] = NaN
boxplot(albu_Nacetyl$albumine)
# Dégage les valeurs aberrantes par état tabagique
for (i in levels(data$smoking_status)){
outliers = boxplot.stats(data$Albumin.adduct.of.Nacetylcysteine[data$smoking_status == i])$out
index_outliers = which(data$Albumin.adduct.of.Nacetylcysteine %in% c(outliers))
# Affiche les valeurs détéctées
print(i)
print(outliers)
# Suppression des valeurs aberrantes
albu_Nacetyl2$albumine[index_outliers] = NaN
}
boxplot(albu_Nacetyl2$albumine)
#============================ Acide sulfonique ===============================
# Filtrer les données
(albu_sulfo <- data3[data3$type_albumine == "Albumin.adduct.of.sulfonic.acid",])
albu_sulfo2 = albu_sulfo
# Calculer les valeurs aberrantes
# Prend les valeurs supérieures ou inférieurs aux quartiles +-1.5 fois l'écart interquartile
(outliers <- boxplot.stats(data$Albumin.adduct.of.sulfonic.acid)$out)
# Afficher les indes des valeurs aberrantes
(index_outliers = which(data$Albumin.adduct.of.sulfonic.acid %in% c(outliers)))
# Suppression des valeurs aberrantes
albu_sulfo$albumine[index_outliers] = NaN
boxplot(albu_sulfo$albumine)
# Dégage les valeurs aberrantes par état tabagique
for (i in levels(data$smoking_status)){
outliers = boxplot.stats(data$Albumin.adduct.of.sulfonic.acid[data$smoking_status == i])$out
index_outliers = which(data$Albumin.adduct.of.sulfonic.acid %in% c(outliers))
# Affiche les valeurs détéctées
print(i)
print(outliers)
# Suppression des valeurs aberrantes
albu_sulfo2$albumine[index_outliers] = NaN
}
boxplot(albu_sulfo2$albumine)
#============================ Acide sulfonique ===============================
# Filtrer les données
(albu_non_undu <- data3[data3$type_albumine == "Albumin.unadducted",])
albu_non_undu2 = albu_non_undu
# Calculer les valeurs aberrantes
# Prend les valeurs supérieures ou inférieurs aux quartiles +-1.5 fois l'écart interquartile
(outliers <- boxplot.stats(data$Albumin.unadducted)$out)
# Afficher les indes des valeurs aberrantes
(index_outliers = which(data$Albumin.unadducted %in% c(outliers)))
# Suppression des valeurs aberrantes
albu_non_undu$albumine[index_outliers] = NaN
boxplot(albu_non_undu$albumine)
for (i in levels(data$smoking_status)){
outliers = boxplot.stats(data$Albumin.unadducted[data$smoking_status == i])$out
index_outliers = which(data$Albumin.unadducted %in% c(outliers))
# Affiche les valeurs détéctées
print(i)
print(outliers)
# Suppression des valeurs aberrantes
albu_non_undu2$albumine[index_outliers] = NaN
}
boxplot(albu_non_undu2$albumine)
#============================ Nouveau dataset sans valeur aberrante ===============================
val_albu = c(albu_CysGly$albumine, albu_Nacetyl$albumine, albu_sulfo$albumine, albu_non_undu$albumine)
val_albu2 = c(albu_CysGly2$albumine, albu_Nacetyl2$albumine, albu_sulfo2$albumine, albu_non_undu2$albumine)
type_Albumine = c(albu_CysGly$type_albumine, albu_Nacetyl$type_albumine, albu_sulfo$type_albumine, albu_non_undu$type_albumine)
data_corr_graph = data.frame(val_albu, type_Albumine)
data_corr_graph2 = data.frame(val_albu2, type_Albumine)
data_corr_graph2
library(ggplot2)
# boxplot général pour voir que c'est mieux
ggplot(data_corr_graph2, aes(x=type_Albumine,y=val_albu, fill=type_Albumine)) +
geom_boxplot()+
xlab(label = "Différents types d'albumines") +
ylab(label = "Concentration") +
theme(axis.text.x = element_text(angle=30, hjust=1, vjust=1))+
theme(legend.position="none")+
ggtitle("Boxplot des différentes albumines")
ggplot(data_corr_graph2, aes(x=type_Albumine,y=val_albu2, fill=type_Albumine)) +
geom_boxplot()+
xlab(label = "Différents types d'albumines") +
ylab(label = "Concentration") +
theme(axis.text.x = element_text(angle=30, hjust=1, vjust=1))+
theme(legend.position="none")+
ggtitle("Boxplot des différentes albumines")
# Zoom pour les plus petits
ggplot(data_corr_graph, aes(x=type_Albumine,y=val_albu, fill=type_Albumine)) +
geom_boxplot()+
xlab(label = "Différents types d'albumines") +
ylab(label = "Concentration") +
theme(axis.text.x = element_text(angle=30, hjust=1, vjust=1))+
theme(legend.position="none")+
ggtitle("Boxplot des différentes albumines")+
ylim(c(0,5))
ggplot(data_corr_graph2, aes(x=type_Albumine,y=val_albu2, fill=type_Albumine)) +
geom_boxplot()+
xlab(label = "Différents types d'albumines") +
ylab(label = "Concentration") +
theme(axis.text.x = element_text(angle=30, hjust=1, vjust=1))+
theme(legend.position="none")+
ggtitle("Boxplot des différentes albumines")+
ylim(c(0,10))
# =============================== Analyse nouveau dataset ===================================
# Implémantation dans le tableau à l'origine
data$CysGly_cor = albu_CysGly$albumine
data$Nacetyl_corr = albu_Nacetyl$albumine
data$sulfo_corr = albu_sulfo$albumine
data$unadducted_corr = albu_non_undu$albumine
data$CysGly_corr2 = albu_CysGly2$albumine
data$Nacetyl_corr2 = albu_Nacetyl2$albumine
data$sulfo_corr2 = albu_sulfo2$albumine
data$unadducted_corr2 = albu_non_undu2$albumine
hist(log10(data$unadducted_corr2))
qqnorm(log(data$unadducted_corr2))
shapiro.test(log(data$Nacetyl_corr2)) # test T sur Nacetyl et non unduit
# Corrélation / ACP
(X = data[12:15])
(X2 = data[8:11])
(Y = data[, 7])
(Y2 = data[, 6])
(Y3 = data[, 2])
PCA = prcomp(na.omit(X))
PCA2 = prcomp(X2)
out <- summary(PCA)
ev <- out$importance[2, ]
cum_ev <- out$importance[3, ]
plot(cum_ev,
pch = 19, col = "navy", las = 1, type = "b", ylim = c(0, 1),
ylab = "Cumulative proportion of explained variance", xlab = "PCs", cex.lab = 1.5
)
(mypal <- brewer.pal(n = length(unique(Y3)), name = "Paired"))
==========================================================================================================
getwd()
setwd("C:/Users/auror/OneDrive - Université Nice Sophia Antipolis/Documents/GitHub/Projet-R-GB4")
data = read.csv("LC-Adductomics.csv")
data
View(data)
# Partie 1
dim(data)
summary(data)
# Détail des moyennes et écart types des Albumines
summary(data$Albumin.adduct.of.CysGly)
summary(data$Albumin.adduct.of.Nacetylcysteine)
summary(data$Albumin.adduct.of.sulfonic.acid)
summary(data$Albumin.unadducted)
table(data$gender)
# 120 hommes et 77 femmes, test stat pour voir si différence significative
table(data$centre)
# 110 personnes sur Turin et 87 à Varese
table(data$smoking_status)
# 67 fumeur actuel, 64 anciens fumeurs et 66 never
table(data$case)
# 101 Sains et 96 Cancéreux
table(data$case, data$gender)
table(data$case, data$smoking_status)
par(mfrow = c(1, 1))
hist(data$age.recr)
qqnorm(data$age.recr)
shapiro.test(data$age.recr)
# répartition normale pas très claire
par(mfrow = c(1,1 ))
# Crée un vecteur pour les moyennes et comparaison en fonction des statut tabagique
(moyennes_par_etat = tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, mean))
# Ecart type
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, sd)
# barplot
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Nacetylcystéine", ylim = c(0,5) )
# Barre d'erreur sd
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
(moyennes_par_etat = tapply(data$Albumin.adduct.of.CysGly, data$smoking_status, mean))
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.CysGly, data$smoking_status, sd)
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "CysGly", ylim = c(0,500))
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.sulfonic.acid, data$smoking_status, sd)
(moyennes_par_etat = tapply(data$Albumin.adduct.of.sulfonic.acid, data$smoking_status, mean))
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Sulfonic", ylim = c(0,100) )
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
ecart_types_par_etat <- tapply(data$Albumin.unadducted, data$smoking_status, sd)
(moyennes_par_etat = tapply(data$Albumin.unadducted, data$smoking_status, mean))
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Non lié", ylim = c(0,700))
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.Nacetylcysteine, data$case, sd)
moyennes_par_etat = tapply(data$Albumin.adduct.of.Nacetylcysteine, data$case, mean)
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Nacetylcystéine", ylim = c(0,4) )
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.CysGly, data$case, sd)
moyennes_par_etat = tapply(data$Albumin.adduct.of.CysGly, data$case, mean)
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "CysGly", ylim = c(0,450))
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.sulfonic.acid, data$case, sd)
moyennes_par_etat = tapply(data$Albumin.adduct.of.sulfonic.acid, data$case, mean)
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Sulfonic", ylim = c(0,50))
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
ecart_types_par_etat <- tapply(data$Albumin.unadducted, data$case, sd)
moyennes_par_etat = tapply(data$Albumin.unadducted, data$case, mean)
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Non lié", ylim = c(0,600) )
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
#Histogramme
hist(log(data$Albumin.adduct.of.Nacetylcysteine))
wilcox.test(data$Albumin.adduct.of.Nacetylcysteine[data$case=="1"],data$Albumin.adduct.of.Nacetylcysteine[data$case=="0"])
hist(data$Albumin.adduct.of.CysGly)
wilcox.test(data$Albumin.adduct.of.CysGly[data$case=="1"],data$Albumin.adduct.of.CysGly[data$case=="0"])
hist(data$Albumin.adduct.of.sulfonic.acid)
wilcox.test(data$Albumin.adduct.of.sulfonic.acid[data$case=="1"],data$Albumin.adduct.of.sulfonic.acid[data$case=="0"])
hist(data$Albumin.unadducted)
wilcox.test(data$Albumin.unadducted[data$case=="1"],data$Albumin.unadducted[data$case=="0"])
mymodel = glm(data$case ~data$Albumin.adduct.of.Nacetylcysteine)
summary(mymodel)
mymodel2 = glm(data$case ~ data$Albumin.adduct.of.CysGly)
summary(mymodel2)
mymodel3 = glm(data$case ~ data$Albumin.adduct.of.sulfonic.acid)
summary(mymodel3)
mymodel4 = glm(data$case ~ data$smoking_status)
summary(mymodel4)
# Visualisation de la corrélation entre les 4 variables numériques
test = data.frame(data$Albumin.adduct.of.Nacetylcysteine, data$Albumin.adduct.of.CysGly, data$Albumin.unadducted, data$Albumin.adduct.of.sulfonic.acid)
pairs(test)
library(ggcorrplot)
matrice_corr = cor(test)
ggcorrplot(matrice_corr)
install.packages("GGally")
library(GGally)
ggpairs(data.frame(data$Albumin.adduct.of.Nacetylcysteine, data$Albumin.adduct.of.CysGly, data$Albumin.unadducted, data$Albumin.adduct.of.sulfonic.acid))
# Calcul des proportions avec prop.table
(proportion <- prop.table(table(data$smoking_status)))
Légende = names(proportion)
library(ggplot2)
# Création du graphique circulaire
ggplot(NULL, aes(x = "", y = proportion, fill = Légende)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
labs(title = "Diagramme circulaire représentant les\n proportions des états tabagiques") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(plot.margin = unit(c(1, 0.5, 1, 1), "cm")) +
geom_text(aes(label = paste0(round(proportion * 100), "%")), position = position_stack(vjust = 0.5), size = 5)
(proportion2 <- prop.table(table(data$smoking_status[data$case == "1"])))
Légende = names(proportion2)
library(ggplot2)
# Création du graphique circulaire
ggplot(NULL, aes(x = "", y = proportion2, fill = Légende)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
labs(title = "Diagramme circulaire représentant les\n proportions des états tabagiques") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(plot.margin = unit(c(1, 0.5, 1, 1), "cm")) +
geom_text(aes(label = paste0(round(proportion2 * 100), "%")), position = position_stack(vjust = 0.5), size = 5)
#============================
# Mise en forme des données
albumine = c(data$Albumin.adduct.of.Nacetylcysteine , data$Albumin.adduct.of.CysGly ,
data$Albumin.unadducted , data$Albumin.adduct.of.sulfonic.acid)
type_albumine = rep(c("Albumin.adduct.of.Nacetylcysteine", "Albumin.adduct.of.CysGly",
"Albumin.unadducted", "Albumin.adduct.of.sulfonic.acid"), each = 197)
data3 = data.frame(albumine, type_albumine)
View(data3)
library(ggplot2)
# boxplot général pour voir que c'est la d Les points en dehors des traits sont aberrants
ggplot(data3, aes(x=type_albumine,y=albumine, fill=type_albumine)) +
geom_boxplot()+
xlab(label = "Différents types d'albumines") +
ylab(label = "Concentration") +
theme(axis.text.x = element_text(angle=30, hjust=1, vjust=1))+
theme(legend.position="none")+
ggtitle("Boxplot des différentes albumines")
# Zoom pour mieux voir
ggplot(data3, aes(x=type_albumine,y=albumine, fill=type_albumine)) +
geom_boxplot()+
xlab(label = "Différents types d'albumines") +
ylab(label = "Concentration") +
theme(axis.text.x = element_text(angle=30, hjust=1, vjust=1))+
theme(legend.position="none")+
ggtitle("Boxplot des différentes albumines")+
ylim(c(0,10))
# Exclusion valeurs aberrantes
# https://delladata.fr/comment-detecter-les-outliers-avec-r/
# Filtrer les données
(albu_CysGly <- data3[data3$type_albumine == "Albumin.adduct.of.CysGly",])
boxplot(albu_CysGly$albumine)
albu_CysGly2 = albu_CysGly
# Calculer les valeurs aberrantes
# Prend les valeurs supérieures ou inférieurs aux quartiles +-1.5 fois l'écart interquartile
(outliers <- boxplot.stats(data$Albumin.adduct.of.CysGly)$out)
# Afficher les indes des valeurs aberrantes
(index_outliers = which(data$Albumin.adduct.of.CysGly %in% c(outliers)))
# Suppression des valeurs aberrantes
albu_CysGly$albumine[index_outliers] = NaN
boxplot(albu_CysGly$albumine)
data$smoking_status = as.factor(data$smoking_status)
albu = c("Albumin.adduct.of.CysGly", "Albumin.adduct.of.Nacetylcysteine", "Albumin.unadducted", "Albumin.adduct.of.sulfonic.acid")
# Dégage les valeurs aberrantes par état tabagique
for (i in levels(data$smoking_status)){
outliers = boxplot.stats(data$Albumin.adduct.of.CysGly[data$smoking_status == i])$out
index_outliers = which(data$Albumin.adduct.of.CysGly %in% c(outliers))
# Affiche les valeurs détéctées
print(i)
print(outliers)
# Suppression des valeurs aberrantes
albu_CysGly2$albumine[index_outliers] = NaN
}
boxplot(albu_CysGly2$albumine)
