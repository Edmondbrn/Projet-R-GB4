selected_components <- eigen_result$vectors[, 1:num_components]
# Transformation des donnÃ©es
principal_components <- as.matrix(centered_data) %*% selected_components
# Affichage des rÃ©sultats
print("Matrice des composantes principales :")
print(principal_components)
# Visualisation des donnÃ©es transformÃ©es
plot(principal_components, col = iris$Species, pch = 16, main = "ACP des donnÃ©es Iris", ylab="", xlab="")
legend("topright", legend = levels(iris$Species), col = 1:3, pch = 16)
# Ajouter des Ã©tiquettes aux axes
xlabel <- sprintf("Composante Principale %d", 1)
ylabel <- sprintf("Composante Principale %d", 2)
title(xlab = xlabel, ylab = ylabel)
# en 3D avec 3 composantes principales
library(scatterplot3d)
colors <- c("setosa" = "red", "versicolor" = "green", "virginica" = "blue")
scatterplot3d(
transformed_data,
color = colors[iris$Species],
pch = 16,
main = "ACP des donnÃ©es Iris (3 premiÃ¨res composantes principales)",
xlab = "Composante Principale 1",
ylab = "Composante Principale 2",
zlab = "Composante Principale 3"
)
legend("topright", legend = levels(iris$Species), fill = colors, pch = 16)
# # CrÃ©er le scree plot
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(1:length(eigen_result$values), eigen_result$values,
type = "b", pch = 16, col = "blue",
xlab = "Composantes Principales", ylab = "Valeurs Propres",
main = "Scree Plot des valeurs propres")
plot(1:length(eigen_result$values), cumulative_prop_var,
type = "b", pch = 16, col = "red",
xlab = "Composantes Principales", ylab = "VariabilitÃ© Cumulative ExpliquÃ©e",
main = "VariabilitÃ© Cumulative ExpliquÃ©e")
# Creation du bi-plot
par(mfrow = c(1, 1))
centered_data <- scale(iris[, 1:4])
biplot(prcomp(centered_data), cex = 0.7)
# Cours ACP  GB4
Gene1 <-c(10,11,8,3,2,1)
Gene2<-c(5,4,5,3,2.8,1)
Gene3<-c(12,9,10,2.5,1.3,2)
plot(Gene1, Gene2, col="blue", pch=19)
install.packages("scatterplot3d") # Install
library("scatterplot3d")
scatterplot3d(Gene1, Gene2, Gene3, color="blue", pch=19, main="3D Scatter Plot",
xlab = "Gene1",
ylab = "Gene2",
zlab = "Gene3")
###EXEMPLE ACP
# Charger le jeu de donnÃ©es Iris
data(iris)
View(iris)
########### Ãtape 2 : Centrage des donnÃ©es
features <- iris[, 1:4]
# Boxplot avant la mise Ã  l'Ã©chelle
par(mfrow = c(1, 2))  # Diviser la fenÃªtre graphique en 1 ligne et 2 colonnes
boxplot(features, main = "Avant la mise Ã  l'Ã©chelle", col = rainbow(4), cex.axis = 0.7)
# Mise Ã  l'Ã©chelle des donnÃ©es
scaled_features <- scale(features)
# Boxplot aprÃ¨s la mise Ã  l'Ã©chelle
boxplot(scaled_features, main = "AprÃ¨s la mise Ã  l'Ã©chelle", col = rainbow(4), cex.axis = 0.7)
# RÃ©initialiser la disposition de la fenÃªtre graphique
par(mfrow = c(1, 1))
############ Ãtape 3 : Calcul de la matrice de covariance
cov_matrix <- cov(scaled_features)
View(cov_matrix)
############# Ãtape 4 : DÃ©composition de la matrice de covariance
(eigen_result <- eigen(cov_matrix))
barplot(eigen_result$values, main = "Valeurs Propres",
xlab = "Composantes Principales", ylab = "Valeur Propre", col = "skyblue")
############# Ãtape 5 : SÃ©lection des composantes principales
# Calculer la proportion cumulÃ©e des valeurs propres
cumulative_proportion <- cumsum(eigen_result$values) / sum(eigen_result$values)
cumulative_proportion
# Trouver le nombre de composantes principales pour atteindre 70% ou 80%
num_components_70 <- which(cumulative_proportion >= 0.7)[1]
num_components_80 <- which(cumulative_proportion >= 0.8)[1]
# Visualiser le graphique avec la rÃ¨gle du 70-80%
barplot(eigen_result$values, main = "Valeurs Propres",
xlab = "Composantes Principales", ylab = "Valeur Propre", col = "skyblue")
# Ajouter des lignes pour indiquer le 70% et 80% de la variance expliquÃ©e
abline(h = 0.7, col = "red", lty = 2)
abline(h = 0.8, col = "green", lty = 2)
#Visualiser un scree plot
# CrÃ©er le scree plot
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(1:length(eigen_result$values), eigen_result$values,
type = "b", pch = 16, col = "blue",
xlab = "Composantes Principales", ylab = "Valeurs Propres",
main = "Scree Plot des valeurs propres")
plot(1:length(eigen_result$values), cumulative_proportion,
type = "b", pch = 16, col = "red",
xlab = "Composantes Principales", ylab = "VariabilitÃ© Cumulative ExpliquÃ©e",
main = "VariabilitÃ© Cumulative ExpliquÃ©e")
par(mfrow = c(1, 1))
########### Ãtape 6 : Transformation des donnÃ©es
# SÃ©lectionner le nombre de composantes principales Ã  conserver (par exemple, les deux premiÃ¨res)
num_components <- 2
selected_components <- eigen_result$vectors[, 1:num_components]
# Transformation des donnÃ©es
principal_components <- as.matrix(centered_data) %*% selected_components
# Affichage des rÃ©sultats
print("Matrice des composantes principales :")
print(principal_components)
# Visualisation des donnÃ©es transformÃ©es
plot(principal_components, col = iris$Species, pch = 16, main = "ACP des donnÃ©es Iris", ylab="", xlab="")
legend("topright", legend = levels(iris$Species), col = 1:3, pch = 16)
# Ajouter des Ã©tiquettes aux axes
xlabel <- sprintf("Composante Principale %d", 1)
ylabel <- sprintf("Composante Principale %d", 2)
title(xlab = xlabel, ylab = ylabel)
# en 3D avec 3 composantes principales
library(scatterplot3d)
colors <- c("setosa" = "red", "versicolor" = "green", "virginica" = "blue")
scatterplot3d(
transformed_data,
color = colors[iris$Species],
pch = 16,
main = "ACP des donnÃ©es Iris (3 premiÃ¨res composantes principales)",
xlab = "Composante Principale 1",
ylab = "Composante Principale 2",
zlab = "Composante Principale 3"
)
legend("topright", legend = levels(iris$Species), fill = colors, pch = 16)
# # CrÃ©er le scree plot
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(1:length(eigen_result$values), eigen_result$values,
type = "b", pch = 16, col = "blue",
xlab = "Composantes Principales", ylab = "Valeurs Propres",
main = "Scree Plot des valeurs propres")
plot(1:length(eigen_result$values), cumulative_prop_var,
type = "b", pch = 16, col = "red",
xlab = "Composantes Principales", ylab = "VariabilitÃ© Cumulative ExpliquÃ©e",
main = "VariabilitÃ© Cumulative ExpliquÃ©e")
# Creation du bi-plot
par(mfrow = c(1, 1))
centered_data <- scale(iris[, 1:4])
biplot(prcomp(centered_data), cex = 0.7)
install.packages("randomForest")
install.packages("randomForestExplainer")
library(randomForestExplainer)
library
data(iris)
library(randomForestExplainer)
library (datasets)
data (iris)
set.seed(123)
train_idx <- sample (1:nrow(iris), 0,7 * nrow (iris))
train_data <- iris[train_idx, ]
train_data <- iris[-train_idx, ]
set.seed(123)
train_idx <- sample (1:nrow(iris), 0,7 * nrow (iris))
train_data <- iris[train_idx, ]
test_data <- iris[-train_idx, ]
rf_model <- randomForest (Species ~ ., data = train_data, ntree = 100)
rf_model <- randomForestExplainer (Species ~ ., data = train_data, ntree = 100)
library(randomForestVIP)
library (datasets)
data (iris)
set.seed(123)
train_idx <- sample (1:nrow(iris), 0,7 * nrow (iris))
train_data <- iris[train_idx, ]
test_data <- iris[-train_idx, ]
rf_model <- randomForestVIP (Species ~ ., data = train_data, ntree = 100)
library(randomForestVIP)
library (datasets)
data (iris)
set.seed(123)
train_idx <- sample (1:nrow(iris), 0,7 * nrow (iris))
train_data <- iris[train_idx, ]
test_data <- iris[-train_idx, ]
rf_model <- randomForestVIP (Species ~ ., data = train_data, ntree = 100)
library(randomForestVIP)
library (datasets)
data (iris)
set.seed(123)
train_idx <- sample (1:nrow(iris), 0,7 * nrow (iris))
train_data <- iris[train_idx, ]
test_data <- iris[-train_idx, ]
rf_model <- randomForestVIP (Species ~ ., data = train_data, ntree = 100)
predications <- predict(rf_model, test_data)
accuracy <- sum(predictions == test_data$Species) / nrow(test_data)
library(randomForest)
library (datasets)
data (iris)
set.seed(123)
train_idx <- sample (1:nrow(iris), 0,7 * nrow (iris))
train_data <- iris[train_idx, ]
test_data <- iris[-train_idx, ]
rf_model <- randomForest (Species ~ ., data = train_data, ntree = 100)
predications <- predict(rf_model, test_data)
accuracy <- sum(predictions == test_data$Species) / nrow(test_data)
q()
q()
getwd()
setwd("C:/Users/Edmond/OneDrive - Université Côte d'Azur/Documents/Cours/Cours Polytech/GB4/Stat/Projet-R-GB4")
setwd("C:/Users/33695/OneDrive/Documents/Cours Polytech/4eme annee/S1/R-studio/Projet de groupe/Projet-R-GB4")
getwd()
setwd("C:\Users\33695\OneDrive\Documents\Cours Polytech\4eme annee\S1\R-studio\Projet de groupe\Projet-R-GB4")
getwd()
setwd("C:/Users/33695/OneDrive/Documents/Cours Polytech/4eme annee/S1/R-studio/Projet de groupe/Projet-R-GB4")
data = read.csv("LC-Adductomics.csv")
data
View(data)
# Partie 1
dim(data)
summary(data)
# Détail des moyennes et écart types des Albumines
summary(data$Albumin.adduct.of.CysGly)
summary(data$Albumin.adduct.of.Nacetylcysteine)
summary(data$Albumin.adduct.of.sulfonic.acid)
summary(data$Albumin.unadducted)
table(data$gender)
# 120 hommes et 77 femmes, test stat pour voir si différence significative
table(data$centre)
# 110 personnes sur Turin et 87 à Varese
table(data$smoking_status)
# 67 fumeur actuel, 64 anciens fumeurs et 66 never
table(data$case)
# 101 Sains et 96 cancéreux
table(data$case, data$gender)
table(data$case, data$smoking_status)
chisq.test(table(data$case, data$smoking_status))
hist(data$age.recr)
qqnorm(data$age.recr)
shapiro.test(data$age.recr)
# répartition normale pas très claire
# Crée un vecteur pour les moyennes et comparaison en fonction des statut tabagique
moyennes_par_etat = tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, mean)
# Ecart type
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, sd)
# barplot
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Nacetylcystéine", ylim = c(0,5) )
# Barre d'erreur sd
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
moyennes_par_etat = tapply(data$Albumin.adduct.of.CysGly, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "CysGly" )
moyennes_par_etat = tapply(data$Albumin.adduct.of.sulfonic.acid, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Sulfonic" )
moyennes_par_etat = tapply(data$Albumin.unadducted, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Non lié" )
kruskal.test(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status)
dunn.test(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status)
install.packages("dunn.test")
getwd()
setwd("C:/Users/33695/OneDrive/Documents/Cours Polytech/4eme annee/S1/R-studio/Projet de groupe/Projet-R-GB4")
data = read.csv("LC-Adductomics.csv")
data
View(data)
# Partie 1
dim(data)
summary(data)
# Détail des moyennes et écart types des Albumines
summary(data$Albumin.adduct.of.CysGly)
summary(data$Albumin.adduct.of.Nacetylcysteine)
summary(data$Albumin.adduct.of.sulfonic.acid)
summary(data$Albumin.unadducted)
table(data$gender)
# 120 hommes et 77 femmes, test stat pour voir si différence significative
table(data$centre)
# 110 personnes sur Turin et 87 à Varese
table(data$smoking_status)
# 67 fumeur actuel, 64 anciens fumeurs et 66 never
table(data$case)
# 101 Sains et 96 cancéreux
table(data$case, data$gender)
table(data$case, data$smoking_status)
chisq.test(table(data$case, data$smoking_status))
hist(data$age.recr)
qqnorm(data$age.recr)
shapiro.test(data$age.recr)
# répartition normale pas très claire
# Crée un vecteur pour les moyennes et comparaison en fonction des statut tabagique
moyennes_par_etat = tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, mean)
# Ecart type
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, sd)
# barplot
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Nacetylcystéine", ylim = c(0,5) )
# Barre d'erreur sd
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
moyennes_par_etat = tapply(data$Albumin.adduct.of.CysGly, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "CysGly" )
moyennes_par_etat = tapply(data$Albumin.adduct.of.sulfonic.acid, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Sulfonic" )
moyennes_par_etat = tapply(data$Albumin.unadducted, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Non lié" )
kruskal.test(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status)
dunn.test(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status)
library(dunn.test)
getwd()
setwd("C:/Users/33695/OneDrive/Documents/Cours Polytech/4eme annee/S1/R-studio/Projet de groupe/Projet-R-GB4")
data = read.csv("LC-Adductomics.csv")
data
View(data)
# Partie 1
dim(data)
summary(data)
# Détail des moyennes et écart types des Albumines
summary(data$Albumin.adduct.of.CysGly)
summary(data$Albumin.adduct.of.Nacetylcysteine)
summary(data$Albumin.adduct.of.sulfonic.acid)
summary(data$Albumin.unadducted)
table(data$gender)
# 120 hommes et 77 femmes, test stat pour voir si différence significative
table(data$centre)
# 110 personnes sur Turin et 87 à Varese
table(data$smoking_status)
# 67 fumeur actuel, 64 anciens fumeurs et 66 never
table(data$case)
# 101 Sains et 96 cancéreux
table(data$case, data$gender)
table(data$case, data$smoking_status)
chisq.test(table(data$case, data$smoking_status))
hist(data$age.recr)
qqnorm(data$age.recr)
shapiro.test(data$age.recr)
# répartition normale pas très claire
# Crée un vecteur pour les moyennes et comparaison en fonction des statut tabagique
moyennes_par_etat = tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, mean)
# Ecart type
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, sd)
# barplot
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Nacetylcystéine", ylim = c(0,5) )
# Barre d'erreur sd
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
moyennes_par_etat = tapply(data$Albumin.adduct.of.CysGly, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "CysGly" )
moyennes_par_etat = tapply(data$Albumin.adduct.of.sulfonic.acid, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Sulfonic" )
moyennes_par_etat = tapply(data$Albumin.unadducted, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Non lié" )
kruskal.test(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status)
dunn.test(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status)
# Calcul des moyennes et écart-types par état
moyennes_par_etat <- tapply(df$valeur, df$etat, mean)
getwd()
setwd("C:/Users/33695/OneDrive/Documents/Cours Polytech/4eme annee/S1/R-studio/Projet de groupe/Projet-R-GB4")
data = read.csv("LC-Adductomics.csv")
data
View(data)
# Partie 1
dim(data)
summary(data)
# Détail des moyennes et écart types des Albumines
summary(data$Albumin.adduct.of.CysGly)
summary(data$Albumin.adduct.of.Nacetylcysteine)
summary(data$Albumin.adduct.of.sulfonic.acid)
summary(data$Albumin.unadducted)
table(data$gender)
# 120 hommes et 77 femmes, test stat pour voir si différence significative
table(data$centre)
# 110 personnes sur Turin et 87 à Varese
table(data$smoking_status)
# 67 fumeur actuel, 64 anciens fumeurs et 66 never
table(data$case)
# 101 Sains et 96 Cancéreux
table(data$case, data$gender)
table(data$case, data$smoking_status)
chisq.test(table(data$case, data$smoking_status))
hist(data$age.recr)
qqnorm(data$age.recr)
shapiro.test(data$age.recr)
# répartition normale pas très claire
# Crée un vecteur pour les moyennes et comparaison en fonction des statut tabagique
moyennes_par_etat = tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, mean)
# Ecart type
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, sd)
# barplot
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Nacetylcystéine", ylim = c(0,5) )
# Barre d'erreur sd
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
moyennes_par_etat = tapply(data$Albumin.adduct.of.CysGly, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "CysGly" )
moyennes_par_etat = tapply(data$Albumin.adduct.of.sulfonic.acid, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Sulfonic" )
moyennes_par_etat = tapply(data$Albumin.unadducted, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Non lié" )
kruskal.test(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status)
dunn.test(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status)
# Calcul des moyennes et écart-types par état
moyennes_par_etat <- tapply(df$valeur, df$etat, mean)
# Crée un vecteur pour les moyennes et comparaison en fonction des statut tabagique
moyennes_par_etat = tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, mean)
# Ecart type
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, sd)
# barplot
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Nacetylcystéine", ylim = c(0,5) )
# Barre d'erreur sd
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
moyennes_par_etat = tapply(data$Albumin.adduct.of.CysGly, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "CysGly" )
moyennes_par_etat = tapply(data$Albumin.adduct.of.CysGly, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "CysGly" )
moyennes_par_etat = tapply(data$Albumin.adduct.of.sulfonic.acid, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Sulfonic" )
moyennes_par_etat = tapply(data$Albumin.unadducted, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Non lié" )
moyennes_par_etat = tapply(data$centre, data$smoking_status, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Centre" )
moyennes_par_etat = tapply(data$smoking_status, data$centre, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Centre" )
table(data$centre,data$smoking_status)
table(data$case,data$centre)
chisq.test(table(data$case, data$centre))
table(data$case, data$smoking_status)
chisq.test(table(data$case, data$smoking_status))
table(data$case,data$centre)
chisq.test(table(data$case, data$centre))
# Crée un vecteur pour les moyennes et comparaison en fonction des statut tabagique
moyennes_par_etat = tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, mean)
# Ecart type
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, sd)
# barplot
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Nacetylcystéine", ylim = c(0,5) )
# Barre d'erreur sd
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
# Crée un vecteur pour les moyennes et comparaison en fonction des statut tabagique
moyennes_par_etat = tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, mean)
# Ecart type
ecart_types_par_etat <- tapply(data$Albumin.adduct.of.Nacetylcysteine, data$smoking_status, sd)
# barplot
bp = barplot(height = moyennes_par_etat, col = "skyblue", main = "Nacetylcystéine", ylim = c(0,5) )
# Barre d'erreur sd
arrows(bp, moyennes_par_etat, bp, moyennes_par_etat + ecart_types_par_etat, angle = 90, code = 3, length = 0.1, col = "black")
moyennes_par_etat = tapply(data$Albumin.unadducted, data$case, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Non lié" )
moyennes_par_etat = tapply(data$Albumin.adduct.of.Nacetylcysteine, data$case, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Nacetylcystéine" )
moyennes_par_etat = tapply(data$Albumin.adduct.of.CysGly, data$case, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "CysGly" )
moyennes_par_etat = tapply(data$Albumin.adduct.of.sulfonic.acid, data$case, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Sulfonic" )
moyennes_par_etat = tapply(data$Albumin.unadducted, data$case, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Non lié" )
moyennes_par_etat = tapply(data$Albumin.adduct.of.Nacetylcysteine, data$case, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Nacetylcystéine" )
moyennes_par_etat = tapply(data$Albumin.adduct.of.CysGly, data$case, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "CysGly" )
moyennes_par_etat = tapply(data$Albumin.adduct.of.sulfonic.acid, data$case, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Sulfonic" )
moyennes_par_etat = tapply(data$Albumin.unadducted, data$case, mean)
barplot(height = moyennes_par_etat, col = "skyblue", main = "Non lié" )
hist(data$Albumin.adduct.of.Nacetylcysteine)
wilcox.test(data$Albumin.adduct.of.Nacetylcysteine[data$case=="1"],data$Albumin.adduct.of.Nacetylcysteine[data$case=="0"])
wilcox.test(data$Albumin.adduct.of.Nacetylcysteine[data$case=="1"],data$Albumin.adduct.of.Nacetylcysteine[data$case=="0"])
hist(data$Albumin.adduct.of.CysGly)
wilcox.test(data$Albumin.adduct.of.CysGly[data$case=="1"],data$Albumin.adduct.of.CysGly[data$case=="0"])
hist(data$Albumin.adduct.of.sulfonic.acid)
wilcox.test(data$Albumin.adduct.of.sulfonic.acid[data$case=="1"],data$Albumin.adduct.of.sulfonic.acid[data$case=="0"])
hist(data$Albumin.unadducted)
wilcox.test(data$Albumin.unadducted[data$case=="1"],data$Albumin.unadducted[data$case=="0"])
mymodel2 = glm(data$case ~ data$Albumin.adduct.of.CysGly)
summary(mymodel2)
install.packages("ggplot2")
library(ggplot2)
ggplot(data, aes(x = "", y = data$Albumin.adduct.of.Nacetylcysteine, fill = categorie)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
theme(legend.position = "right")
ggplot(data, aes(x = "", y = data$Albumin.adduct.of.Nacetylcysteine, fill = data$case)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
theme(legend.position = "right")
ggplot(data, aes(x = "", y = data$Albumin.adduct.of.Nacetylcysteine, fill = data$case)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
theme(legend.position = "right")
ggplot(data, aes(x = "", y = data$Albumin.adduct.of.Nacetylcysteine, fill = data$smoking_status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
theme(legend.position = "right")
# Calcule les proportions
data$proportion <- data$Albumin.adduct.of.Nacetylcysteine / sum(data$Albumin.adduct.of.Nacetylcysteine) * 100
# Graphique circulaire avec proportions
ggplot(data, aes(x = "", y = data$Albumin.adduct.of.Nacetylcysteine, fill = data$smoking_status)) +
geom_bar(stat = "identity", width = 1) +
geom_text(aes(label = sprintf("%.1f%%", proportion)), position = position_stack(vjust = 0.5)) +
coord_polar("y") +
theme_void() +
theme(legend.position = "right")
# Graphique circulaire avec proportions
ggplot(data, aes(x = "", y = data$Albumin.adduct.of.Nacetylcysteine, fill = data$smoking_status)) +
geom_bar(stat = "identity", width = 1) +
geom_text(aes(label = sprintf("%.1f%", proportion)), position = position_stack(vjust = 0.5)) +
coord_polar("y") +
theme_void() +
theme(legend.position = "right")
# Remplace ces valeurs avec les tiennes
data <- data.frame(
Albumin.adduct.of.Nacetylcysteine = c(data$Albumin.adduct.of.Nacetylcysteine),
smoking_status = c(data$smoking_status)
)
# Calcule les proportions
data$proportion <- data$Albumin.adduct.of.Nacetylcysteine / sum(data$Albumin.adduct.of.Nacetylcysteine) * 100
# Graphique circulaire avec proportions
ggplot(data, aes(x = "", y = Albumin.adduct.of.Nacetylcysteine, fill = smoking_status)) +
geom_bar(stat = "identity", width = 1) +
geom_text(aes(label = sprintf("%.1f%%", proportion)), position = position_stack(vjust = 0.5)) +
coord_polar("y") +
theme_void() +
theme(legend.position = "right")
data <- data.frame(
Albumin.adduct.of.Nacetylcysteine = c(data$Albumin.adduct.of.Nacetylcysteine),
smoking_status = c("Current", "Former", "Never")
)
